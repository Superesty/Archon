# Docker Compose para despliegue en Coolify (producci√≥n)
# - No publica puertos al host; usa "expose" y deja que Coolify/Traefik enrute por dominio
# - Configura dominios en Coolify con el puerto interno correcto

services:
  archon-server:
    build:
      context: ./python
      dockerfile: Dockerfile.server
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_SERVER_PORT: 8181
    container_name: archon-server
    expose:
      - "8181"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      LOGFIRE_TOKEN: ${LOGFIRE_TOKEN:-}
      SERVICE_DISCOVERY_MODE: docker_compose
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ARCHON_SERVER_PORT: 8181
      ARCHON_MCP_PORT: ${ARCHON_MCP_PORT:-8051}
      ARCHON_AGENTS_PORT: ${ARCHON_AGENTS_PORT:-8052}
      ALLOWED_INTERNAL_CIDRS: ${ALLOWED_INTERNAL_CIDRS:-10.0.0.0/8,172.16.0.0/12,127.0.0.0/8,192.168.0.0/16,100.64.0.0/10}
    networks:
      - app-network
      - coolify
    labels:
      - "coolify.managed=true"
      
    command:
      - python
      - -m
      - uvicorn
      - src.server.main:socket_app
      - --host
      - 0.0.0.0
      - --port
      - "8181"
    healthcheck:
      test:
        - CMD
        - sh
        - -c
        - 'python -c "import urllib.request; urllib.request.urlopen(''http://localhost:8181/health'')"'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  archon-mcp:
    build:
      context: ./python
      dockerfile: Dockerfile.mcp
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_MCP_PORT: ${ARCHON_MCP_PORT:-8051}
    container_name: archon-mcp
    expose:
      - "${ARCHON_MCP_PORT:-8051}"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      LOGFIRE_TOKEN: ${LOGFIRE_TOKEN:-}
      SERVICE_DISCOVERY_MODE: docker_compose
      TRANSPORT: sse
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_SERVICE_URL: http://archon-server:${ARCHON_SERVER_PORT:-8181}
      AGENTS_SERVICE_URL: http://archon-agents:${ARCHON_AGENTS_PORT:-8052}
      ARCHON_MCP_PORT: ${ARCHON_MCP_PORT:-8051}
      ARCHON_SERVER_PORT: ${ARCHON_SERVER_PORT:-8181}
      ARCHON_AGENTS_PORT: ${ARCHON_AGENTS_PORT:-8052}
    networks:
      - app-network
    depends_on:
      - archon-server
      - archon-agents
    healthcheck:
      test: ["CMD", "sh", "-c", 'python -c "import socket; s=socket.socket(); s.connect((''localhost'', ${ARCHON_MCP_PORT:-8051})); s.close()"']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  archon-agents:
    build:
      context: ./python
      dockerfile: Dockerfile.agents
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_AGENTS_PORT: ${ARCHON_AGENTS_PORT:-8052}
    container_name: archon-agents
    expose:
      - "${ARCHON_AGENTS_PORT:-8052}"
    environment:
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      LOGFIRE_TOKEN: ${LOGFIRE_TOKEN:-}
      SERVICE_DISCOVERY_MODE: docker_compose
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ARCHON_AGENTS_PORT: ${ARCHON_AGENTS_PORT:-8052}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "sh", "-c", 'python -c "import urllib.request; urllib.request.urlopen(''http://localhost:${ARCHON_AGENTS_PORT:-8052}/health'')"']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  archon-frontend:
    build:
      context: ./archon-ui-main
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: ${VITE_API_URL}
    container_name: archon-ui
    expose:
      - "80"
    environment:
      VITE_API_URL: ${VITE_API_URL}
    networks:
      - app-network
      - coolify
    labels:
      - "coolify.managed=true"
      
    healthcheck:
      test:
        - CMD
        - wget
        - -qO-
        - http://localhost/
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - archon-server

networks:
  app-network:
    driver: bridge
  coolify:
    external: true
